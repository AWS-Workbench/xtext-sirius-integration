@Ecore(
	nsPrefix="diagram-xtext",
	nsURI="http://altran.com/general/integration/xtextsirius/model/diagram/1.0"
)
@GenModel(
	modelName="Diagram-xtext",
	modelPluginID="com.altran.general.integration.xtextsirius.model.diagram",
	complianceLevel="6.0",
	runtimeVersion="2.3",
	nonNLSMarkers="false",
	copyrightFields="false",
	creationIcons="false",
	modelDirectory="/com.altran.general.integration.xtextsirius.model.diagram/src-gen",
	editDirectory="/com.altran.general.integration.xtextsirius.model.diagram.edit/src-gen",
	editPluginID="com.altran.general.integration.xtextsirius.mode.diagram.edit",
	codeFormatting="true",
	importOrganizing="true",
	cleanup="true",
	styleProviders="true",
	
	disposableProviderFactory="true",
	extensibleProviderFactory="true",
	childCreationExtenders="true"
)
package com.altran.general.integration.xtextsirius.model.diagram.diagramxtext

import com.altran.general.integration.xtextsirius.model.xtext.xtextsirius.IXtextDirectEditModelDescription
import com.altran.general.integration.xtextsirius.model.xtext.xtextsirius.IXtextDirectEditValueDescription
import org.eclipse.emf.common.util.BasicEList
import org.eclipse.emf.ecore.util.ECrossReferenceAdapter
import org.eclipse.sirius.diagram.description.DescriptionPackage
import org.eclipse.sirius.diagram.description.DiagramElementMapping
import org.eclipse.sirius.diagram.description.tool.DirectEditLabel

annotation "http://www.eclipse.org/emf/2002/Ecore" as Ecore
annotation "http://www.eclipse.org/emf/2002/GenModel" as GenModel

abstract class AXtextDirectEditLabel extends DirectEditLabel {
	op DiagramElementMapping[] getMapping() {
        val r = this.eResource()
        if (r === null) {
            throw new UnsupportedOperationException()
        }
        val crossReferencer = ECrossReferenceAdapter.getCrossReferenceAdapter(r)
        if (crossReferencer === null) {
            throw new UnsupportedOperationException()
        }
        val diagramElementMappings = newArrayList()
        val settings = crossReferencer.getInverseReferences(this, true)
        for (setting : settings) {
            val eReferencer = setting.getEObject()
            val eFeature = setting.getEStructuralFeature()
            if (eReferencer instanceof DiagramElementMapping && eFeature == DescriptionPackage.eINSTANCE.getDiagramElementMapping_LabelDirectEdit()) {
                diagramElementMappings.add(eReferencer as DiagramElementMapping);
            }
        }
        
        return new BasicEList<DiagramElementMapping>(diagramElementMappings);
	}
	
}

@GenModel(image="true")
class XtextDirectEditModelDescription extends AXtextDirectEditLabel, IXtextDirectEditModelDescription {

}

@GenModel(image="true")
class XtextDirectEditValueDescription extends AXtextDirectEditLabel, IXtextDirectEditValueDescription {
	
}
