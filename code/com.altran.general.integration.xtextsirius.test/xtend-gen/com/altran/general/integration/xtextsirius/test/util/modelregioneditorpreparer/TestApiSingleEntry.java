package com.altran.general.integration.xtextsirius.test.util.modelregioneditorpreparer;

import com.altran.general.integration.xtextsirius.test.AFowlerdslDefaultModelTest;
import com.altran.general.integration.xtextsirius.test.util.modelregioneditorpreparer.AModelRegionEditorPreparer;
import com.altran.general.integration.xtextsirius.util.ModelRegionEditorPreparer;
import com.altran.general.integration.xtextsirius.util.SemanticElementLocation;
import com.google.inject.Injector;
import java.util.Collections;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Command;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Event;
import org.eclipse.xtext.example.fowlerdsl.statemachine.State;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Statemachine;
import org.eclipse.xtext.example.fowlerdsl.statemachine.StatemachinePackage;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Transition;
import org.eclipse.xtext.util.TextRegion;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.junit.Assert;
import org.junit.Test;

@SuppressWarnings("all")
public class TestApiSingleEntry extends AModelRegionEditorPreparer {
  @Test
  public void eventOnlyName() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    List<String> _emptyList = CollectionLiterals.<String>emptyList();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, _emptyList);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0", _substring);
    TextRegion _textRegion = new TextRegion(11, 6);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventNameCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0 1");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    List<String> _emptyList = CollectionLiterals.<String>emptyList();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, _emptyList);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0 1");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0 1", _substring);
    TextRegion _textRegion = new TextRegion(11, 8);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventNameCodeGuard() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0 1 [1..pi]");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("constants");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("pi 314");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    List<String> _emptyList = CollectionLiterals.<String>emptyList();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, _emptyList);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0 1 [1..pi]");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("constants");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("pi 314");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0 1 [1..pi]", _substring);
    TextRegion _textRegion = new TextRegion(11, 16);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventOnlyName_name() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.name")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0", _substring);
    TextRegion _textRegion = new TextRegion(11, 6);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventNameCode_name() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0 123");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.name")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0 123");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0", _substring);
    TextRegion _textRegion = new TextRegion(11, 6);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventNameCode_nameCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0 123");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.name", "Event.code")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0 123");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0 123", _substring);
    TextRegion _textRegion = new TextRegion(11, 10);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventNameGuard_nameCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0 [1..2]");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.name", "Event.code")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0 [1..2]");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0", _substring);
    TextRegion _textRegion = new TextRegion(11, 6);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventNameGuard_nameGuard() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0 [1..2]");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.name", "Event.guard")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0 [1..2]");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0 [1..2]", _substring);
    TextRegion _textRegion = new TextRegion(11, 13);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventNameCodeGuard_nameGuard() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0 123 [1..2]");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.name", "Event.guard")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0 123 [1..2]");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0 123 [1..2]", _substring);
    TextRegion _textRegion = new TextRegion(11, 17);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventName_nameCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.name", "Event.code")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0", _substring);
    TextRegion _textRegion = new TextRegion(11, 6);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventName_nameCodeGuard() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.name", "Event.code", "Event.guard")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0", _substring);
    TextRegion _textRegion = new TextRegion(11, 6);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventName_guard() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.guard")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("event0[");
    _builder_1.newLine();
    _builder_1.append("]");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("", _substring);
    TextRegion _textRegion = new TextRegion(18, 0);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void guard_self() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    StatemachinePackage _statemachinePackage = AFowlerdslDefaultModelTest.statemachineFactory.getStatemachinePackage();
    EReference _event_Guard = _statemachinePackage.getEvent_Guard();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(null, event, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.guard")), _event_Guard);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("event0[");
    _builder_1.newLine();
    _builder_1.append("]");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("", _substring);
    TextRegion _textRegion = new TextRegion(18, 0);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertNull(_resolve);
  }
  
  @Test
  public void eventNameCode_singleLine() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("1");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    List<String> _emptyList = CollectionLiterals.<String>emptyList();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, false, _emptyList);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0  \t  \t  \t1");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0  \t  \t  \t1", _substring);
    TextRegion _textRegion = new TextRegion(11, 16);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventNameGuard_nameGuard_singleLine() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0 \t\t[");
    _builder.newLine();
    _builder.append("1\t\t  \t\t..");
    _builder.newLine();
    _builder.append("2               ]");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, false, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.name", "Event.guard")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0 \t\t[  1\t\t  \t\t..  2               ]");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0 \t\t[  1\t\t  \t\t..  2               ]", _substring);
    TextRegion _textRegion = new TextRegion(11, 40);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventNameCode_multiLine() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("1");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    List<String> _emptyList = CollectionLiterals.<String>emptyList();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, _emptyList);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("1");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0\r\n\t\r\n\t\r\n\t1", _substring);
    TextRegion _textRegion = new TextRegion(11, 16);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void eventNameGuard_nameGuard_multiLine() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0 \t\t[");
    _builder.newLine();
    _builder.append("1\t\t  \t\t..");
    _builder.newLine();
    _builder.append("2               ]");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Event> _events = model.getEvents();
    final Event event = _events.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(event, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.name", "Event.guard")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0 \t\t[");
    _builder_1.newLine();
    _builder_1.append("1\t\t  \t\t..");
    _builder_1.newLine();
    _builder_1.append("2               ]");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0 \t\t[\r\n1\t\t  \t\t..\r\n2               ]", _substring);
    TextRegion _textRegion = new TextRegion(11, 40);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(event, _resolve);
  }
  
  @Test
  public void transitionOnlyEvent_eventGuard() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state state0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0 => state0");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<State> _states = model.getStates();
    final State state = _states.get(0);
    EList<Transition> _transitions = state.getTransitions();
    final Transition transition = _transitions.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(transition, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.event", "Event.guard")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("event0");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("state state0");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0 => state0");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0", _substring);
    TextRegion _textRegion = new TextRegion(41, 6);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(transition, _resolve);
  }
  
  @Test
  public void transitionEventGuard_eventGuard() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("events");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state state0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event0 [123] => state0");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<State> _states = model.getStates();
    final State state = _states.get(0);
    EList<Transition> _transitions = state.getTransitions();
    final Transition transition = _transitions.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(transition, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.event", "Event.guard")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("events");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("event0");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("state state0");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("event0 [123] => state0");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("event0 [123]", _substring);
    TextRegion _textRegion = new TextRegion(41, 12);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(transition, _resolve);
  }
  
  @Test
  public void commandNameCode_nameCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("commands");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cmd1 123");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Command> _commands = model.getCommands();
    final Command cmd = _commands.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(cmd, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.code", "Event.name")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("commands");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("cmd1 123");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("cmd1 123", _substring);
    TextRegion _textRegion = new TextRegion(13, 8);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(cmd, _resolve);
  }
  
  @Test
  public void commandGuardNameCode_nameCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("commands");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("[123]cmd1 123");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Command> _commands = model.getCommands();
    final Command cmd = _commands.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(cmd, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.code", "Event.name")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("commands");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("[123]");
    _builder_1.newLine();
    _builder_1.append("cmd1 123");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("cmd1 123", _substring);
    TextRegion _textRegion = new TextRegion(18, 8);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(cmd, _resolve);
  }
  
  @Test
  public void commandGuardNameCode_guardName() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("commands");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("[123]cmd1 123");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Command> _commands = model.getCommands();
    final Command cmd = _commands.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(cmd, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.guard", "Event.name")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("commands");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("[123]cmd1 123");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("[123]cmd1", _substring);
    TextRegion _textRegion = new TextRegion(13, 9);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(cmd, _resolve);
  }
  
  @Test
  public void commandNameCode_guard() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("commands");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cmd1 123");
    _builder.newLine();
    _builder.append("end");
    _builder.newLine();
    final Statemachine model = this.parseIntoResource(_builder.toString());
    EList<Command> _commands = model.getCommands();
    final Command cmd = _commands.get(0);
    Injector _injector = this.getInjector();
    final ModelRegionEditorPreparer preparer = new ModelRegionEditorPreparer(cmd, _injector, true, Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("Event.guard")));
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("commands");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("[");
    _builder_1.newLine();
    _builder_1.append("]cmd1 123");
    _builder_1.newLine();
    _builder_1.append("end");
    _builder_1.newLine();
    String _string = _builder_1.toString();
    String _text = preparer.getText();
    Assert.assertEquals(_string, _text);
    final TextRegion textRegion = preparer.getTextRegion();
    String _text_1 = preparer.getText();
    int _offset = textRegion.getOffset();
    int _offset_1 = textRegion.getOffset();
    int _length = textRegion.getLength();
    int _plus = (_offset_1 + _length);
    String _substring = _text_1.substring(_offset, _plus);
    Assert.assertEquals("", _substring);
    TextRegion _textRegion = new TextRegion(14, 0);
    TextRegion _textRegion_1 = preparer.getTextRegion();
    Assert.assertEquals(_textRegion, _textRegion_1);
    SemanticElementLocation _semanticElementLocation = preparer.getSemanticElementLocation();
    Resource _eResource = model.eResource();
    EObject _resolve = _semanticElementLocation.resolve(_eResource);
    Assert.assertSame(cmd, _resolve);
  }
}
