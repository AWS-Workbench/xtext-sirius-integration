/*
 * generated by Xtext
 */
package org.eclipse.xtext.example.fowlerdsl.services;

import java.util.List;

import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class StatemachineGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StatemachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"org.eclipse.xtext.example.fowlerdsl.Statemachine.Statemachine");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Action cStatemachineAction_0 = (Action) this.cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group) this.cGroup.eContents().get(1);
		private final Keyword cEventsKeyword_1_0 = (Keyword) this.cGroup_1.eContents().get(0);
		private final Assignment cEventsAssignment_1_1 = (Assignment) this.cGroup_1.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_1_1_0 = (RuleCall) this.cEventsAssignment_1_1.eContents()
				.get(0);
		private final Keyword cEndKeyword_1_2 = (Keyword) this.cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group) this.cGroup.eContents().get(2);
		private final Keyword cResetEventsKeyword_2_0 = (Keyword) this.cGroup_2.eContents().get(0);
		private final Assignment cResetEventsAssignment_2_1 = (Assignment) this.cGroup_2.eContents().get(1);
		private final CrossReference cResetEventsEventCrossReference_2_1_0 = (CrossReference) this.cResetEventsAssignment_2_1
				.eContents().get(0);
		private final RuleCall cResetEventsEventIDTerminalRuleCall_2_1_0_1 = (RuleCall) this.cResetEventsEventCrossReference_2_1_0
				.eContents().get(1);
		private final Keyword cEndKeyword_2_2 = (Keyword) this.cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group) this.cGroup.eContents().get(3);
		private final Keyword cCommandsKeyword_3_0 = (Keyword) this.cGroup_3.eContents().get(0);
		private final Assignment cCommandsAssignment_3_1 = (Assignment) this.cGroup_3.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_3_1_0 = (RuleCall) this.cCommandsAssignment_3_1
				.eContents().get(0);
		private final Keyword cEndKeyword_3_2 = (Keyword) this.cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group) this.cGroup.eContents().get(4);
		private final Keyword cConstantsKeyword_4_0 = (Keyword) this.cGroup_4.eContents().get(0);
		private final Assignment cConnstantsAssignment_4_1 = (Assignment) this.cGroup_4.eContents().get(1);
		private final RuleCall cConnstantsConstantParserRuleCall_4_1_0 = (RuleCall) this.cConnstantsAssignment_4_1
				.eContents().get(0);
		private final Keyword cEndKeyword_4_2 = (Keyword) this.cGroup_4.eContents().get(2);
		private final Assignment cStatesAssignment_5 = (Assignment) this.cGroup.eContents().get(5);
		private final RuleCall cStatesStateParserRuleCall_5_0 = (RuleCall) this.cStatesAssignment_5.eContents().get(0);
		
		// Statemachine:
		// {Statemachine} ('events' events+=Event+ 'end')? ('resetEvents'
		// resetEvents+=[Event]+ 'end')? ('commands'
		// commands+=Command+ 'end')? ('constants' connstants+=Constant+ 'end')?
		// states+=State*;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}

		// {Statemachine} ('events' events+=Event+ 'end')? ('resetEvents'
		// resetEvents+=[Event]+ 'end')? ('commands'
		// commands+=Command+ 'end')? ('constants' connstants+=Constant+ 'end')?
		// states+=State*
		public Group getGroup() {
			return this.cGroup;
		}

		// {Statemachine}
		public Action getStatemachineAction_0() {
			return this.cStatemachineAction_0;
		}

		// ('events' events+=Event+ 'end')?
		public Group getGroup_1() {
			return this.cGroup_1;
		}

		// 'events'
		public Keyword getEventsKeyword_1_0() {
			return this.cEventsKeyword_1_0;
		}

		// events+=Event+
		public Assignment getEventsAssignment_1_1() {
			return this.cEventsAssignment_1_1;
		}

		// Event
		public RuleCall getEventsEventParserRuleCall_1_1_0() {
			return this.cEventsEventParserRuleCall_1_1_0;
		}

		// 'end'
		public Keyword getEndKeyword_1_2() {
			return this.cEndKeyword_1_2;
		}

		// ('resetEvents' resetEvents+=[Event]+ 'end')?
		public Group getGroup_2() {
			return this.cGroup_2;
		}

		// 'resetEvents'
		public Keyword getResetEventsKeyword_2_0() {
			return this.cResetEventsKeyword_2_0;
		}

		// resetEvents+=[Event]+
		public Assignment getResetEventsAssignment_2_1() {
			return this.cResetEventsAssignment_2_1;
		}

		// [Event]
		public CrossReference getResetEventsEventCrossReference_2_1_0() {
			return this.cResetEventsEventCrossReference_2_1_0;
		}

		// ID
		public RuleCall getResetEventsEventIDTerminalRuleCall_2_1_0_1() {
			return this.cResetEventsEventIDTerminalRuleCall_2_1_0_1;
		}

		// 'end'
		public Keyword getEndKeyword_2_2() {
			return this.cEndKeyword_2_2;
		}

		// ('commands' commands+=Command+ 'end')?
		public Group getGroup_3() {
			return this.cGroup_3;
		}

		// 'commands'
		public Keyword getCommandsKeyword_3_0() {
			return this.cCommandsKeyword_3_0;
		}

		// commands+=Command+
		public Assignment getCommandsAssignment_3_1() {
			return this.cCommandsAssignment_3_1;
		}

		// Command
		public RuleCall getCommandsCommandParserRuleCall_3_1_0() {
			return this.cCommandsCommandParserRuleCall_3_1_0;
		}

		// 'end'
		public Keyword getEndKeyword_3_2() {
			return this.cEndKeyword_3_2;
		}

		// ('constants' connstants+=Constant+ 'end')?
		public Group getGroup_4() {
			return this.cGroup_4;
		}

		// 'constants'
		public Keyword getConstantsKeyword_4_0() {
			return this.cConstantsKeyword_4_0;
		}

		// connstants+=Constant+
		public Assignment getConnstantsAssignment_4_1() {
			return this.cConnstantsAssignment_4_1;
		}

		// Constant
		public RuleCall getConnstantsConstantParserRuleCall_4_1_0() {
			return this.cConnstantsConstantParserRuleCall_4_1_0;
		}

		// 'end'
		public Keyword getEndKeyword_4_2() {
			return this.cEndKeyword_4_2;
		}

		// states+=State*
		public Assignment getStatesAssignment_5() {
			return this.cStatesAssignment_5;
		}

		// State
		public RuleCall getStatesStateParserRuleCall_5_0() {
			return this.cStatesStateParserRuleCall_5_0;
		}
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"org.eclipse.xtext.example.fowlerdsl.Statemachine.Event");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment) this.cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall) this.cNameAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
		private final RuleCall cCodeIDTerminalRuleCall_1_0 = (RuleCall) this.cCodeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group) this.cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword) this.cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment) this.cGroup_2.eContents().get(1);
		private final RuleCall cGuardGuardParserRuleCall_2_1_0 = (RuleCall) this.cGuardAssignment_2_1.eContents()
				.get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword) this.cGroup_2.eContents().get(2);
		
		// Event:
		// name=ID code=ID ('[' guard=Guard ']')?;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}

		// name=ID code=ID ('[' guard=Guard ']')?
		public Group getGroup() {
			return this.cGroup;
		}

		// name=ID
		public Assignment getNameAssignment_0() {
			return this.cNameAssignment_0;
		}

		// ID
		public RuleCall getNameIDTerminalRuleCall_0_0() {
			return this.cNameIDTerminalRuleCall_0_0;
		}

		// code=ID
		public Assignment getCodeAssignment_1() {
			return this.cCodeAssignment_1;
		}

		// ID
		public RuleCall getCodeIDTerminalRuleCall_1_0() {
			return this.cCodeIDTerminalRuleCall_1_0;
		}

		// ('[' guard=Guard ']')?
		public Group getGroup_2() {
			return this.cGroup_2;
		}

		// '['
		public Keyword getLeftSquareBracketKeyword_2_0() {
			return this.cLeftSquareBracketKeyword_2_0;
		}

		// guard=Guard
		public Assignment getGuardAssignment_2_1() {
			return this.cGuardAssignment_2_1;
		}

		// Guard
		public RuleCall getGuardGuardParserRuleCall_2_1_0() {
			return this.cGuardGuardParserRuleCall_2_1_0;
		}

		// ']'
		public Keyword getRightSquareBracketKeyword_2_2() {
			return this.cRightSquareBracketKeyword_2_2;
		}
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"org.eclipse.xtext.example.fowlerdsl.Statemachine.Guard");
		private final Alternatives cAlternatives = (Alternatives) this.rule.eContents().get(1);
		private final RuleCall cValueGuardParserRuleCall_0 = (RuleCall) this.cAlternatives.eContents().get(0);
		private final RuleCall cRangeGuardParserRuleCall_1 = (RuleCall) this.cAlternatives.eContents().get(1);
		
		// Guard:
		// ValueGuard | RangeGuard;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}

		// ValueGuard | RangeGuard
		public Alternatives getAlternatives() {
			return this.cAlternatives;
		}

		// ValueGuard
		public RuleCall getValueGuardParserRuleCall_0() {
			return this.cValueGuardParserRuleCall_0;
		}

		// RangeGuard
		public RuleCall getRangeGuardParserRuleCall_1() {
			return this.cRangeGuardParserRuleCall_1;
		}
	}

	public class ValueGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"org.eclipse.xtext.example.fowlerdsl.Statemachine.ValueGuard");
		private final Assignment cCondAssignment = (Assignment) this.rule.eContents().get(1);
		private final RuleCall cCondValueParserRuleCall_0 = (RuleCall) this.cCondAssignment.eContents().get(0);
		
		// ValueGuard:
		// cond=Value;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}

		// cond=Value
		public Assignment getCondAssignment() {
			return this.cCondAssignment;
		}

		// Value
		public RuleCall getCondValueParserRuleCall_0() {
			return this.cCondValueParserRuleCall_0;
		}
	}

	public class RangeGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"org.eclipse.xtext.example.fowlerdsl.Statemachine.RangeGuard");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Assignment cMinAssignment_0 = (Assignment) this.cGroup.eContents().get(0);
		private final RuleCall cMinValueParserRuleCall_0_0 = (RuleCall) this.cMinAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword) this.cGroup.eContents().get(1);
		private final Assignment cMaxAssignment_2 = (Assignment) this.cGroup.eContents().get(2);
		private final RuleCall cMaxValueParserRuleCall_2_0 = (RuleCall) this.cMaxAssignment_2.eContents().get(0);
		
		// RangeGuard:
		// min=Value '..' max=Value;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}

		// min=Value '..' max=Value
		public Group getGroup() {
			return this.cGroup;
		}

		// min=Value
		public Assignment getMinAssignment_0() {
			return this.cMinAssignment_0;
		}

		// Value
		public RuleCall getMinValueParserRuleCall_0_0() {
			return this.cMinValueParserRuleCall_0_0;
		}

		// '..'
		public Keyword getFullStopFullStopKeyword_1() {
			return this.cFullStopFullStopKeyword_1;
		}

		// max=Value
		public Assignment getMaxAssignment_2() {
			return this.cMaxAssignment_2;
		}

		// Value
		public RuleCall getMaxValueParserRuleCall_2_0() {
			return this.cMaxValueParserRuleCall_2_0;
		}
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"org.eclipse.xtext.example.fowlerdsl.Statemachine.Value");
		private final Alternatives cAlternatives = (Alternatives) this.rule.eContents().get(1);
		private final RuleCall cConstantRefParserRuleCall_0 = (RuleCall) this.cAlternatives.eContents().get(0);
		private final RuleCall cIntLiteralParserRuleCall_1 = (RuleCall) this.cAlternatives.eContents().get(1);
		
		// Value:
		// ConstantRef | IntLiteral;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}

		// ConstantRef | IntLiteral
		public Alternatives getAlternatives() {
			return this.cAlternatives;
		}

		// ConstantRef
		public RuleCall getConstantRefParserRuleCall_0() {
			return this.cConstantRefParserRuleCall_0;
		}

		// IntLiteral
		public RuleCall getIntLiteralParserRuleCall_1() {
			return this.cIntLiteralParserRuleCall_1;
		}
	}

	public class ConstantRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"org.eclipse.xtext.example.fowlerdsl.Statemachine.ConstantRef");
		private final Assignment cConstantAssignment = (Assignment) this.rule.eContents().get(1);
		private final CrossReference cConstantConstantCrossReference_0 = (CrossReference) this.cConstantAssignment
				.eContents().get(0);
		private final RuleCall cConstantConstantIDTerminalRuleCall_0_1 = (RuleCall) this.cConstantConstantCrossReference_0
				.eContents().get(1);
		
		// ConstantRef:
		// constant=[Constant];
		@Override
		public ParserRule getRule() {
			return this.rule;
		}

		// constant=[Constant]
		public Assignment getConstantAssignment() {
			return this.cConstantAssignment;
		}

		// [Constant]
		public CrossReference getConstantConstantCrossReference_0() {
			return this.cConstantConstantCrossReference_0;
		}

		// ID
		public RuleCall getConstantConstantIDTerminalRuleCall_0_1() {
			return this.cConstantConstantIDTerminalRuleCall_0_1;
		}
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"org.eclipse.xtext.example.fowlerdsl.Statemachine.IntLiteral");
		private final Assignment cValueAssignment = (Assignment) this.rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall) this.cValueAssignment.eContents().get(0);
		
		// IntLiteral:
		// value=INT;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}

		// value=INT
		public Assignment getValueAssignment() {
			return this.cValueAssignment;
		}

		// INT
		public RuleCall getValueINTTerminalRuleCall_0() {
			return this.cValueINTTerminalRuleCall_0;
		}
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"org.eclipse.xtext.example.fowlerdsl.Statemachine.Command");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment) this.cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall) this.cNameAssignment_0.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
		private final RuleCall cCodeIDTerminalRuleCall_1_0 = (RuleCall) this.cCodeAssignment_1.eContents().get(0);
		
		// Command:
		// name=ID code=ID;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}

		// name=ID code=ID
		public Group getGroup() {
			return this.cGroup;
		}

		// name=ID
		public Assignment getNameAssignment_0() {
			return this.cNameAssignment_0;
		}

		// ID
		public RuleCall getNameIDTerminalRuleCall_0_0() {
			return this.cNameIDTerminalRuleCall_0_0;
		}

		// code=ID
		public Assignment getCodeAssignment_1() {
			return this.cCodeAssignment_1;
		}

		// ID
		public RuleCall getCodeIDTerminalRuleCall_1_0() {
			return this.cCodeIDTerminalRuleCall_1_0;
		}
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"org.eclipse.xtext.example.fowlerdsl.Statemachine.Constant");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment) this.cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall) this.cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall) this.cValueAssignment_1.eContents().get(0);
		
		// Constant:
		// name=ID value=Value;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}

		// name=ID value=Value
		public Group getGroup() {
			return this.cGroup;
		}

		// name=ID
		public Assignment getNameAssignment_0() {
			return this.cNameAssignment_0;
		}

		// ID
		public RuleCall getNameIDTerminalRuleCall_0_0() {
			return this.cNameIDTerminalRuleCall_0_0;
		}

		// value=Value
		public Assignment getValueAssignment_1() {
			return this.cValueAssignment_1;
		}

		// Value
		public RuleCall getValueValueParserRuleCall_1_0() {
			return this.cValueValueParserRuleCall_1_0;
		}
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"org.eclipse.xtext.example.fowlerdsl.Statemachine.State");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall) this.cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group) this.cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_2_0 = (Keyword) this.cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment) this.cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall) this.cDescriptionAssignment_2_1
				.eContents().get(0);
		private final Group cGroup_3 = (Group) this.cGroup.eContents().get(3);
		private final Keyword cActionsKeyword_3_0 = (Keyword) this.cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword) this.cGroup_3.eContents().get(1);
		private final Assignment cActionsAssignment_3_2 = (Assignment) this.cGroup_3.eContents().get(2);
		private final CrossReference cActionsCommandCrossReference_3_2_0 = (CrossReference) this.cActionsAssignment_3_2
				.eContents().get(0);
		private final RuleCall cActionsCommandIDTerminalRuleCall_3_2_0_1 = (RuleCall) this.cActionsCommandCrossReference_3_2_0
				.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword) this.cGroup_3.eContents().get(3);
		private final Assignment cTransitionsAssignment_4 = (Assignment) this.cGroup.eContents().get(4);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_0 = (RuleCall) this.cTransitionsAssignment_4
				.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword) this.cGroup.eContents().get(5);
		
		// State:
		// 'state' name=ID ('description' description=STRING)? ('actions' '{'
		// actions+=[Command]+ '}')? transitions+=Transition*
		// 'end';
		@Override
		public ParserRule getRule() {
			return this.rule;
		}

		// 'state' name=ID ('description' description=STRING)? ('actions' '{'
		// actions+=[Command]+ '}')? transitions+=Transition*
		// 'end'
		public Group getGroup() {
			return this.cGroup;
		}

		// 'state'
		public Keyword getStateKeyword_0() {
			return this.cStateKeyword_0;
		}

		// name=ID
		public Assignment getNameAssignment_1() {
			return this.cNameAssignment_1;
		}

		// ID
		public RuleCall getNameIDTerminalRuleCall_1_0() {
			return this.cNameIDTerminalRuleCall_1_0;
		}

		// ('description' description=STRING)?
		public Group getGroup_2() {
			return this.cGroup_2;
		}

		// 'description'
		public Keyword getDescriptionKeyword_2_0() {
			return this.cDescriptionKeyword_2_0;
		}

		// description=STRING
		public Assignment getDescriptionAssignment_2_1() {
			return this.cDescriptionAssignment_2_1;
		}

		// STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() {
			return this.cDescriptionSTRINGTerminalRuleCall_2_1_0;
		}

		// ('actions' '{' actions+=[Command]+ '}')?
		public Group getGroup_3() {
			return this.cGroup_3;
		}

		// 'actions'
		public Keyword getActionsKeyword_3_0() {
			return this.cActionsKeyword_3_0;
		}

		// '{'
		public Keyword getLeftCurlyBracketKeyword_3_1() {
			return this.cLeftCurlyBracketKeyword_3_1;
		}

		// actions+=[Command]+
		public Assignment getActionsAssignment_3_2() {
			return this.cActionsAssignment_3_2;
		}

		// [Command]
		public CrossReference getActionsCommandCrossReference_3_2_0() {
			return this.cActionsCommandCrossReference_3_2_0;
		}

		// ID
		public RuleCall getActionsCommandIDTerminalRuleCall_3_2_0_1() {
			return this.cActionsCommandIDTerminalRuleCall_3_2_0_1;
		}

		// '}'
		public Keyword getRightCurlyBracketKeyword_3_3() {
			return this.cRightCurlyBracketKeyword_3_3;
		}

		// transitions+=Transition*
		public Assignment getTransitionsAssignment_4() {
			return this.cTransitionsAssignment_4;
		}

		// Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_0() {
			return this.cTransitionsTransitionParserRuleCall_4_0;
		}

		// 'end'
		public Keyword getEndKeyword_5() {
			return this.cEndKeyword_5;
		}
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"org.eclipse.xtext.example.fowlerdsl.Statemachine.Transition");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment) this.cGroup.eContents().get(0);
		private final CrossReference cEventEventCrossReference_0_0 = (CrossReference) this.cEventAssignment_0
				.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_0_0_1 = (RuleCall) this.cEventEventCrossReference_0_0
				.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword) this.cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment) this.cGroup.eContents().get(2);
		private final CrossReference cStateStateCrossReference_2_0 = (CrossReference) this.cStateAssignment_2
				.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_0_1 = (RuleCall) this.cStateStateCrossReference_2_0
				.eContents().get(1);
		
		// Transition:
		// event=[Event] '=>' state=[State];
		@Override
		public ParserRule getRule() {
			return this.rule;
		}

		// event=[Event] '=>' state=[State]
		public Group getGroup() {
			return this.cGroup;
		}

		// event=[Event]
		public Assignment getEventAssignment_0() {
			return this.cEventAssignment_0;
		}

		// [Event]
		public CrossReference getEventEventCrossReference_0_0() {
			return this.cEventEventCrossReference_0_0;
		}

		// ID
		public RuleCall getEventEventIDTerminalRuleCall_0_0_1() {
			return this.cEventEventIDTerminalRuleCall_0_0_1;
		}

		// '=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() {
			return this.cEqualsSignGreaterThanSignKeyword_1;
		}

		// state=[State]
		public Assignment getStateAssignment_2() {
			return this.cStateAssignment_2;
		}

		// [State]
		public CrossReference getStateStateCrossReference_2_0() {
			return this.cStateStateCrossReference_2_0;
		}

		// ID
		public RuleCall getStateStateIDTerminalRuleCall_2_0_1() {
			return this.cStateStateIDTerminalRuleCall_2_0_1;
		}
	}
	
	
	private final StatemachineElements pStatemachine;
	private final EventElements pEvent;
	private final GuardElements pGuard;
	private final ValueGuardElements pValueGuard;
	private final RangeGuardElements pRangeGuard;
	private final ValueElements pValue;
	private final ConstantRefElements pConstantRef;
	private final IntLiteralElements pIntLiteral;
	private final CommandElements pCommand;
	private final ConstantElements pConstant;
	private final StateElements pState;
	private final TransitionElements pTransition;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StatemachineGrammarAccess(final GrammarProvider grammarProvider, final TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStatemachine = new StatemachineElements();
		this.pEvent = new EventElements();
		this.pGuard = new GuardElements();
		this.pValueGuard = new ValueGuardElements();
		this.pRangeGuard = new RangeGuardElements();
		this.pValue = new ValueElements();
		this.pConstantRef = new ConstantRefElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pCommand = new CommandElements();
		this.pConstant = new ConstantElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
	}
	
	protected Grammar internalFindGrammar(final GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.example.fowlerdsl.Statemachine".equals(grammar.getName())) {
				return grammar;
			}
			final List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return this.grammar;
	}


	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return this.gaTerminals;
	}


	// Statemachine:
	// {Statemachine} ('events' events+=Event+ 'end')? ('resetEvents'
	// resetEvents+=[Event]+ 'end')? ('commands'
	// commands+=Command+ 'end')? ('constants' connstants+=Constant+ 'end')?
	// states+=State*;
	public StatemachineElements getStatemachineAccess() {
		return this.pStatemachine;
	}
	
	public ParserRule getStatemachineRule() {
		return getStatemachineAccess().getRule();
	}

	// Event:
	// name=ID code=ID ('[' guard=Guard ']')?;
	public EventElements getEventAccess() {
		return this.pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	// Guard:
	// ValueGuard | RangeGuard;
	public GuardElements getGuardAccess() {
		return this.pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	// ValueGuard:
	// cond=Value;
	public ValueGuardElements getValueGuardAccess() {
		return this.pValueGuard;
	}
	
	public ParserRule getValueGuardRule() {
		return getValueGuardAccess().getRule();
	}

	// RangeGuard:
	// min=Value '..' max=Value;
	public RangeGuardElements getRangeGuardAccess() {
		return this.pRangeGuard;
	}
	
	public ParserRule getRangeGuardRule() {
		return getRangeGuardAccess().getRule();
	}

	// Value:
	// ConstantRef | IntLiteral;
	public ValueElements getValueAccess() {
		return this.pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	// ConstantRef:
	// constant=[Constant];
	public ConstantRefElements getConstantRefAccess() {
		return this.pConstantRef;
	}
	
	public ParserRule getConstantRefRule() {
		return getConstantRefAccess().getRule();
	}

	// IntLiteral:
	// value=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return this.pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	// Command:
	// name=ID code=ID;
	public CommandElements getCommandAccess() {
		return this.pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	// Constant:
	// name=ID value=Value;
	public ConstantElements getConstantAccess() {
		return this.pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	// State:
	// 'state' name=ID ('description' description=STRING)? ('actions' '{'
	// actions+=[Command]+ '}')? transitions+=Transition*
	// 'end';
	public StateElements getStateAccess() {
		return this.pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	// Transition:
	// event=[Event] '=>' state=[State];
	public TransitionElements getTransitionAccess() {
		return this.pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	// terminal ID:
	// '^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return this.gaTerminals.getIDRule();
	}

	// terminal INT returns ecore::EInt:
	// '0'..'9'+;
	public TerminalRule getINTRule() {
		return this.gaTerminals.getINTRule();
	}

	// terminal STRING:
	// '"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return this.gaTerminals.getSTRINGRule();
	}

	// terminal ML_COMMENT:
	// '/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return this.gaTerminals.getML_COMMENTRule();
	}

	// terminal SL_COMMENT:
	// '//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return this.gaTerminals.getSL_COMMENTRule();
	}

	// terminal WS:
	// ' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return this.gaTerminals.getWSRule();
	}

	// terminal ANY_OTHER:
	// .;
	public TerminalRule getANY_OTHERRule() {
		return this.gaTerminals.getANY_OTHERRule();
	}
}
