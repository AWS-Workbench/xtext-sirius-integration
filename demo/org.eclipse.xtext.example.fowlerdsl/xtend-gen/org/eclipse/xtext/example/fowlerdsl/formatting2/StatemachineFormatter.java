/**
 * generated by Xtext
 */
package org.eclipse.xtext.example.fowlerdsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.example.fowlerdsl.services.StatemachineGrammarAccess;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Command;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Constant;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Event;
import org.eclipse.xtext.example.fowlerdsl.statemachine.RangeGuard;
import org.eclipse.xtext.example.fowlerdsl.statemachine.State;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Statemachine;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Transition;
import org.eclipse.xtext.example.fowlerdsl.statemachine.ValueGuard;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class StatemachineFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private StatemachineGrammarAccess _statemachineGrammarAccess;
  
  protected void _format(final Statemachine statemachine, @Extension final IFormattableDocument document) {
    EList<Event> _events = statemachine.getEvents();
    for (final Event events : _events) {
      this.format(events, document);
    }
    EList<Command> _commands = statemachine.getCommands();
    for (final Command commands : _commands) {
      this.format(commands, document);
    }
    EList<Constant> _constants = statemachine.getConstants();
    for (final Constant constants : _constants) {
      this.format(constants, document);
    }
    EList<State> _states = statemachine.getStates();
    for (final State states : _states) {
      this.format(states, document);
    }
  }
  
  protected void _format(final Event event, @Extension final IFormattableDocument document) {
    this.format(event.getGuard(), document);
  }
  
  protected void _format(final ValueGuard valueguard, @Extension final IFormattableDocument document) {
    this.format(valueguard.getCond(), document);
  }
  
  protected void _format(final RangeGuard rangeguard, @Extension final IFormattableDocument document) {
    this.format(rangeguard.getMin(), document);
    this.format(rangeguard.getMax(), document);
  }
  
  protected void _format(final Command command, @Extension final IFormattableDocument document) {
    this.format(command.getGuard(), document);
  }
  
  protected void _format(final Constant constant, @Extension final IFormattableDocument document) {
    this.format(constant.getValue(), document);
  }
  
  protected void _format(final State state, @Extension final IFormattableDocument document) {
    EList<Transition> _transitions = state.getTransitions();
    for (final Transition transitions : _transitions) {
      this.format(transitions, document);
    }
  }
  
  protected void _format(final Transition transition, @Extension final IFormattableDocument document) {
    this.format(transition.getGuard(), document);
  }
  
  public void format(final Object rangeguard, final IFormattableDocument document) {
    if (rangeguard instanceof XtextResource) {
      _format((XtextResource)rangeguard, document);
      return;
    } else if (rangeguard instanceof RangeGuard) {
      _format((RangeGuard)rangeguard, document);
      return;
    } else if (rangeguard instanceof ValueGuard) {
      _format((ValueGuard)rangeguard, document);
      return;
    } else if (rangeguard instanceof Command) {
      _format((Command)rangeguard, document);
      return;
    } else if (rangeguard instanceof Constant) {
      _format((Constant)rangeguard, document);
      return;
    } else if (rangeguard instanceof Event) {
      _format((Event)rangeguard, document);
      return;
    } else if (rangeguard instanceof State) {
      _format((State)rangeguard, document);
      return;
    } else if (rangeguard instanceof Statemachine) {
      _format((Statemachine)rangeguard, document);
      return;
    } else if (rangeguard instanceof Transition) {
      _format((Transition)rangeguard, document);
      return;
    } else if (rangeguard instanceof EObject) {
      _format((EObject)rangeguard, document);
      return;
    } else if (rangeguard == null) {
      _format((Void)null, document);
      return;
    } else if (rangeguard != null) {
      _format(rangeguard, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(rangeguard, document).toString());
    }
  }
}
