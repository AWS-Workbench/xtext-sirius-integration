/*
 * generated by Xtext 2.12.0
 */
package nl.altran.example.xtext.html.serializer;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

import com.google.inject.Inject;

import nl.altran.example.xtext.html.services.HtmlLangGrammarAccess;

@SuppressWarnings("all")
public class HtmlLangSyntacticSequencer extends AbstractSyntacticSequencer {
	
	protected HtmlLangGrammarAccess grammarAccess;
	
	@Inject
	protected void init(final IGrammarAccess access) {
		this.grammarAccess = (HtmlLangGrammarAccess) access;
	}
	
	@Override
	protected String getUnassignedRuleCallToken(final EObject semanticObject, final RuleCall ruleCall,
			final INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(final EObject semanticObject, final ISynTransition transition,
			final INode fromNode, final INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) {
			return;
		}
		final List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (final AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			final List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

}
