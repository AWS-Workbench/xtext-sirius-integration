/*
 * generated by Xtext 2.12.0
 */
package nl.altran.example.xtext.html.services;

import java.util.List;

import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class HtmlLangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class HtmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.Html");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Keyword cHtmlKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
		private final Assignment cHeadAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
		private final RuleCall cHeadHeadParserRuleCall_1_0 = (RuleCall) this.cHeadAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment) this.cGroup.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_2_0 = (RuleCall) this.cBodyAssignment_2.eContents().get(0);
		private final Keyword cHtmlKeyword_3 = (Keyword) this.cGroup.eContents().get(3);
		
		// Html:
		// '<html>'
		// head=Head
		// body=Body
		// '</html>';
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// '<html>' head=Head body=Body '</html>'
		public Group getGroup() {
			return this.cGroup;
		}
		
		// '<html>'
		public Keyword getHtmlKeyword_0() {
			return this.cHtmlKeyword_0;
		}
		
		// head=Head
		public Assignment getHeadAssignment_1() {
			return this.cHeadAssignment_1;
		}
		
		// Head
		public RuleCall getHeadHeadParserRuleCall_1_0() {
			return this.cHeadHeadParserRuleCall_1_0;
		}
		
		// body=Body
		public Assignment getBodyAssignment_2() {
			return this.cBodyAssignment_2;
		}
		
		// Body
		public RuleCall getBodyBodyParserRuleCall_2_0() {
			return this.cBodyBodyParserRuleCall_2_0;
		}
		
		// '</html>'
		public Keyword getHtmlKeyword_3() {
			return this.cHtmlKeyword_3;
		}
	}

	public class HeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.Head");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Action cHeadAction_0 = (Action) this.cGroup.eContents().get(0);
		private final Keyword cHeadKeyword_1 = (Keyword) this.cGroup.eContents().get(1);
		private final Assignment cHeadersAssignment_2 = (Assignment) this.cGroup.eContents().get(2);
		private final RuleCall cHeadersHeaderParserRuleCall_2_0 = (RuleCall) this.cHeadersAssignment_2.eContents()
				.get(0);
		private final Keyword cHeadKeyword_3 = (Keyword) this.cGroup.eContents().get(3);
		
		// Head:
		// {Head}
		// '<head>'
		// headers+=Header*
		// '</head>';
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// {Head} '<head>' headers+=Header* '</head>'
		public Group getGroup() {
			return this.cGroup;
		}
		
		// {Head}
		public Action getHeadAction_0() {
			return this.cHeadAction_0;
		}
		
		// '<head>'
		public Keyword getHeadKeyword_1() {
			return this.cHeadKeyword_1;
		}
		
		// headers+=Header*
		public Assignment getHeadersAssignment_2() {
			return this.cHeadersAssignment_2;
		}
		
		// Header
		public RuleCall getHeadersHeaderParserRuleCall_2_0() {
			return this.cHeadersHeaderParserRuleCall_2_0;
		}
		
		// '</head>'
		public Keyword getHeadKeyword_3() {
			return this.cHeadKeyword_3;
		}
	}

	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.Header");
		private final Alternatives cAlternatives = (Alternatives) this.rule.eContents().get(1);
		private final RuleCall cTitleParserRuleCall_0 = (RuleCall) this.cAlternatives.eContents().get(0);
		private final RuleCall cStyleParserRuleCall_1 = (RuleCall) this.cAlternatives.eContents().get(1);
		
		// Header:
		// Title | Style;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// Title | Style
		public Alternatives getAlternatives() {
			return this.cAlternatives;
		}
		
		// Title
		public RuleCall getTitleParserRuleCall_0() {
			return this.cTitleParserRuleCall_0;
		}
		
		// Style
		public RuleCall getStyleParserRuleCall_1() {
			return this.cStyleParserRuleCall_1;
		}
	}

	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.Title");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
		private final RuleCall cNameHTMLSTRINGTerminalRuleCall_1_0 = (RuleCall) this.cNameAssignment_1.eContents()
				.get(0);
		private final Keyword cTitleKeyword_2 = (Keyword) this.cGroup.eContents().get(2);
		
		// Title:
		// '<title>' name=HTMLSTRING '</title>';
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// '<title>' name=HTMLSTRING '</title>'
		public Group getGroup() {
			return this.cGroup;
		}
		
		// '<title>'
		public Keyword getTitleKeyword_0() {
			return this.cTitleKeyword_0;
		}
		
		// name=HTMLSTRING
		public Assignment getNameAssignment_1() {
			return this.cNameAssignment_1;
		}
		
		// HTMLSTRING
		public RuleCall getNameHTMLSTRINGTerminalRuleCall_1_0() {
			return this.cNameHTMLSTRINGTerminalRuleCall_1_0;
		}
		
		// '</title>'
		public Keyword getTitleKeyword_2() {
			return this.cTitleKeyword_2;
		}
	}

	public class StyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.Style");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Keyword cStyleKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
		private final Assignment cStylesAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
		private final RuleCall cStylesHTMLSTRINGTerminalRuleCall_1_0 = (RuleCall) this.cStylesAssignment_1.eContents()
				.get(0);
		private final Keyword cStyleKeyword_2 = (Keyword) this.cGroup.eContents().get(2);
		
		// Style:
		// '<style>'
		// styles=HTMLSTRING
		// '</style>';
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// '<style>' styles=HTMLSTRING '</style>'
		public Group getGroup() {
			return this.cGroup;
		}
		
		// '<style>'
		public Keyword getStyleKeyword_0() {
			return this.cStyleKeyword_0;
		}
		
		// styles=HTMLSTRING
		public Assignment getStylesAssignment_1() {
			return this.cStylesAssignment_1;
		}
		
		// HTMLSTRING
		public RuleCall getStylesHTMLSTRINGTerminalRuleCall_1_0() {
			return this.cStylesHTMLSTRINGTerminalRuleCall_1_0;
		}
		
		// '</style>'
		public Keyword getStyleKeyword_2() {
			return this.cStyleKeyword_2;
		}
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.Body");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Action cBodyAction_0 = (Action) this.cGroup.eContents().get(0);
		private final Keyword cBodyKeyword_1 = (Keyword) this.cGroup.eContents().get(1);
		private final Assignment cContentsAssignment_2 = (Assignment) this.cGroup.eContents().get(2);
		private final RuleCall cContentsBodyContentsParserRuleCall_2_0 = (RuleCall) this.cContentsAssignment_2
				.eContents().get(0);
		private final Keyword cBodyKeyword_3 = (Keyword) this.cGroup.eContents().get(3);
		
		// Body:
		// {Body}
		// '<body>'
		// contents+=BodyContents*
		// '</body>';
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// {Body} '<body>' contents+=BodyContents* '</body>'
		public Group getGroup() {
			return this.cGroup;
		}
		
		// {Body}
		public Action getBodyAction_0() {
			return this.cBodyAction_0;
		}
		
		// '<body>'
		public Keyword getBodyKeyword_1() {
			return this.cBodyKeyword_1;
		}
		
		// contents+=BodyContents*
		public Assignment getContentsAssignment_2() {
			return this.cContentsAssignment_2;
		}
		
		// BodyContents
		public RuleCall getContentsBodyContentsParserRuleCall_2_0() {
			return this.cContentsBodyContentsParserRuleCall_2_0;
		}
		
		// '</body>'
		public Keyword getBodyKeyword_3() {
			return this.cBodyKeyword_3;
		}
	}

	public class BodyContentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.BodyContents");
		private final Alternatives cAlternatives = (Alternatives) this.rule.eContents().get(1);
		private final RuleCall cParagraphParserRuleCall_0 = (RuleCall) this.cAlternatives.eContents().get(0);
		private final RuleCall cUnorderedListParserRuleCall_1 = (RuleCall) this.cAlternatives.eContents().get(1);
		
		// BodyContents:
		// Paragraph | UnorderedList;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// Paragraph | UnorderedList
		public Alternatives getAlternatives() {
			return this.cAlternatives;
		}
		
		// Paragraph
		public RuleCall getParagraphParserRuleCall_0() {
			return this.cParagraphParserRuleCall_0;
		}
		
		// UnorderedList
		public RuleCall getUnorderedListParserRuleCall_1() {
			return this.cUnorderedListParserRuleCall_1;
		}
	}

	public class ParagraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.Paragraph");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Action cParagraphAction_0 = (Action) this.cGroup.eContents().get(0);
		private final Keyword cPKeyword_1 = (Keyword) this.cGroup.eContents().get(1);
		private final Assignment cContentsAssignment_2 = (Assignment) this.cGroup.eContents().get(2);
		private final RuleCall cContentsTextElementParserRuleCall_2_0 = (RuleCall) this.cContentsAssignment_2
				.eContents().get(0);
		private final Keyword cPKeyword_3 = (Keyword) this.cGroup.eContents().get(3);
		
		// Paragraph:
		// {Paragraph}
		// '<p>'
		// contents+=TextElement*
		// '</p>';
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// {Paragraph} '<p>' contents+=TextElement* '</p>'
		public Group getGroup() {
			return this.cGroup;
		}
		
		// {Paragraph}
		public Action getParagraphAction_0() {
			return this.cParagraphAction_0;
		}
		
		// '<p>'
		public Keyword getPKeyword_1() {
			return this.cPKeyword_1;
		}
		
		// contents+=TextElement*
		public Assignment getContentsAssignment_2() {
			return this.cContentsAssignment_2;
		}
		
		// TextElement
		public RuleCall getContentsTextElementParserRuleCall_2_0() {
			return this.cContentsTextElementParserRuleCall_2_0;
		}
		
		// '</p>'
		public Keyword getPKeyword_3() {
			return this.cPKeyword_3;
		}
	}

	public class UnorderedListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.UnorderedList");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Keyword cUlKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
		private final RuleCall cItemsListItemParserRuleCall_1_0 = (RuleCall) this.cItemsAssignment_1.eContents().get(0);
		private final Keyword cUlKeyword_2 = (Keyword) this.cGroup.eContents().get(2);
		
		// UnorderedList:
		// '<ul>'
		// items+=ListItem+
		// '</ul>';
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// '<ul>' items+=ListItem+ '</ul>'
		public Group getGroup() {
			return this.cGroup;
		}
		
		// '<ul>'
		public Keyword getUlKeyword_0() {
			return this.cUlKeyword_0;
		}
		
		// items+=ListItem+
		public Assignment getItemsAssignment_1() {
			return this.cItemsAssignment_1;
		}
		
		// ListItem
		public RuleCall getItemsListItemParserRuleCall_1_0() {
			return this.cItemsListItemParserRuleCall_1_0;
		}
		
		// '</ul>'
		public Keyword getUlKeyword_2() {
			return this.cUlKeyword_2;
		}
	}

	public class ListItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.ListItem");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Action cListItemAction_0 = (Action) this.cGroup.eContents().get(0);
		private final Keyword cLiKeyword_1 = (Keyword) this.cGroup.eContents().get(1);
		private final Assignment cContentsAssignment_2 = (Assignment) this.cGroup.eContents().get(2);
		private final RuleCall cContentsTextElementParserRuleCall_2_0 = (RuleCall) this.cContentsAssignment_2
				.eContents().get(0);
		private final Keyword cLiKeyword_3 = (Keyword) this.cGroup.eContents().get(3);
		
		// ListItem:
		// {ListItem}
		// '<li>' contents+=TextElement* '</li>';
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// {ListItem} '<li>' contents+=TextElement* '</li>'
		public Group getGroup() {
			return this.cGroup;
		}
		
		// {ListItem}
		public Action getListItemAction_0() {
			return this.cListItemAction_0;
		}
		
		// '<li>'
		public Keyword getLiKeyword_1() {
			return this.cLiKeyword_1;
		}
		
		// contents+=TextElement*
		public Assignment getContentsAssignment_2() {
			return this.cContentsAssignment_2;
		}
		
		// TextElement
		public RuleCall getContentsTextElementParserRuleCall_2_0() {
			return this.cContentsTextElementParserRuleCall_2_0;
		}
		
		// '</li>'
		public Keyword getLiKeyword_3() {
			return this.cLiKeyword_3;
		}
	}

	public class TextElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.TextElement");
		private final Alternatives cAlternatives = (Alternatives) this.rule.eContents().get(1);
		private final RuleCall cFreeformTextParserRuleCall_0 = (RuleCall) this.cAlternatives.eContents().get(0);
		private final RuleCall cBoldParserRuleCall_1 = (RuleCall) this.cAlternatives.eContents().get(1);
		private final RuleCall cItalicsParserRuleCall_2 = (RuleCall) this.cAlternatives.eContents().get(2);
		
		// TextElement:
		// FreeformText | Bold | Italics;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// FreeformText | Bold | Italics
		public Alternatives getAlternatives() {
			return this.cAlternatives;
		}
		
		// FreeformText
		public RuleCall getFreeformTextParserRuleCall_0() {
			return this.cFreeformTextParserRuleCall_0;
		}
		
		// Bold
		public RuleCall getBoldParserRuleCall_1() {
			return this.cBoldParserRuleCall_1;
		}
		
		// Italics
		public RuleCall getItalicsParserRuleCall_2() {
			return this.cItalicsParserRuleCall_2;
		}
	}

	public class FreeformTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.FreeformText");
		private final Assignment cTextAssignment = (Assignment) this.rule.eContents().get(1);
		private final RuleCall cTextHTMLSTRINGTerminalRuleCall_0 = (RuleCall) this.cTextAssignment.eContents().get(0);
		
		// FreeformText:
		// text=HTMLSTRING;
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// text=HTMLSTRING
		public Assignment getTextAssignment() {
			return this.cTextAssignment;
		}
		
		// HTMLSTRING
		public RuleCall getTextHTMLSTRINGTerminalRuleCall_0() {
			return this.cTextHTMLSTRINGTerminalRuleCall_0;
		}
	}

	public class BoldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.Bold");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Keyword cBKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
		private final RuleCall cTextHTMLSTRINGTerminalRuleCall_1_0 = (RuleCall) this.cTextAssignment_1.eContents()
				.get(0);
		private final Keyword cBKeyword_2 = (Keyword) this.cGroup.eContents().get(2);
		
		// Bold:
		// '<b>' text=HTMLSTRING '</b>';
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// '<b>' text=HTMLSTRING '</b>'
		public Group getGroup() {
			return this.cGroup;
		}
		
		// '<b>'
		public Keyword getBKeyword_0() {
			return this.cBKeyword_0;
		}
		
		// text=HTMLSTRING
		public Assignment getTextAssignment_1() {
			return this.cTextAssignment_1;
		}
		
		// HTMLSTRING
		public RuleCall getTextHTMLSTRINGTerminalRuleCall_1_0() {
			return this.cTextHTMLSTRINGTerminalRuleCall_1_0;
		}
		
		// '</b>'
		public Keyword getBKeyword_2() {
			return this.cBKeyword_2;
		}
	}

	public class ItalicsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.Italics");
		private final Group cGroup = (Group) this.rule.eContents().get(1);
		private final Keyword cIKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
		private final RuleCall cTextHTMLSTRINGTerminalRuleCall_1_0 = (RuleCall) this.cTextAssignment_1.eContents()
				.get(0);
		private final Keyword cIKeyword_2 = (Keyword) this.cGroup.eContents().get(2);
		
		// Italics:
		// '<i>' text=HTMLSTRING '</i>';
		@Override
		public ParserRule getRule() {
			return this.rule;
		}
		
		// '<i>' text=HTMLSTRING '</i>'
		public Group getGroup() {
			return this.cGroup;
		}
		
		// '<i>'
		public Keyword getIKeyword_0() {
			return this.cIKeyword_0;
		}
		
		// text=HTMLSTRING
		public Assignment getTextAssignment_1() {
			return this.cTextAssignment_1;
		}
		
		// HTMLSTRING
		public RuleCall getTextHTMLSTRINGTerminalRuleCall_1_0() {
			return this.cTextHTMLSTRINGTerminalRuleCall_1_0;
		}
		
		// '</i>'
		public Keyword getIKeyword_2() {
			return this.cIKeyword_2;
		}
	}
	
	
	private final HtmlElements pHtml;
	private final HeadElements pHead;
	private final HeaderElements pHeader;
	private final TitleElements pTitle;
	private final StyleElements pStyle;
	private final BodyElements pBody;
	private final BodyContentsElements pBodyContents;
	private final ParagraphElements pParagraph;
	private final UnorderedListElements pUnorderedList;
	private final ListItemElements pListItem;
	private final TextElementElements pTextElement;
	private final FreeformTextElements pFreeformText;
	private final BoldElements pBold;
	private final ItalicsElements pItalics;
	private final TerminalRule tHTMLSTRING;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public HtmlLangGrammarAccess(final GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pHtml = new HtmlElements();
		this.pHead = new HeadElements();
		this.pHeader = new HeaderElements();
		this.pTitle = new TitleElements();
		this.pStyle = new StyleElements();
		this.pBody = new BodyElements();
		this.pBodyContents = new BodyContentsElements();
		this.pParagraph = new ParagraphElements();
		this.pUnorderedList = new UnorderedListElements();
		this.pListItem = new ListItemElements();
		this.pTextElement = new TextElementElements();
		this.pFreeformText = new FreeformTextElements();
		this.pBold = new BoldElements();
		this.pItalics = new ItalicsElements();
		this.tHTMLSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.HTMLSTRING");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.altran.example.xtext.html.HtmlLang.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(),
				"nl.altran.example.xtext.html.HtmlLang.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(final GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.altran.example.xtext.html.HtmlLang".equals(grammar.getName())) {
				return grammar;
			}
			final List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return this.grammar;
	}



	// Html:
	// '<html>'
	// head=Head
	// body=Body
	// '</html>';
	public HtmlElements getHtmlAccess() {
		return this.pHtml;
	}
	
	public ParserRule getHtmlRule() {
		return getHtmlAccess().getRule();
	}
	
	// Head:
	// {Head}
	// '<head>'
	// headers+=Header*
	// '</head>';
	public HeadElements getHeadAccess() {
		return this.pHead;
	}
	
	public ParserRule getHeadRule() {
		return getHeadAccess().getRule();
	}
	
	// Header:
	// Title | Style;
	public HeaderElements getHeaderAccess() {
		return this.pHeader;
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}
	
	// Title:
	// '<title>' name=HTMLSTRING '</title>';
	public TitleElements getTitleAccess() {
		return this.pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	// Style:
	// '<style>'
	// styles=HTMLSTRING
	// '</style>';
	public StyleElements getStyleAccess() {
		return this.pStyle;
	}
	
	public ParserRule getStyleRule() {
		return getStyleAccess().getRule();
	}
	
	// Body:
	// {Body}
	// '<body>'
	// contents+=BodyContents*
	// '</body>';
	public BodyElements getBodyAccess() {
		return this.pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	// BodyContents:
	// Paragraph | UnorderedList;
	public BodyContentsElements getBodyContentsAccess() {
		return this.pBodyContents;
	}
	
	public ParserRule getBodyContentsRule() {
		return getBodyContentsAccess().getRule();
	}
	
	// Paragraph:
	// {Paragraph}
	// '<p>'
	// contents+=TextElement*
	// '</p>';
	public ParagraphElements getParagraphAccess() {
		return this.pParagraph;
	}
	
	public ParserRule getParagraphRule() {
		return getParagraphAccess().getRule();
	}
	
	// UnorderedList:
	// '<ul>'
	// items+=ListItem+
	// '</ul>';
	public UnorderedListElements getUnorderedListAccess() {
		return this.pUnorderedList;
	}
	
	public ParserRule getUnorderedListRule() {
		return getUnorderedListAccess().getRule();
	}
	
	// ListItem:
	// {ListItem}
	// '<li>' contents+=TextElement* '</li>';
	public ListItemElements getListItemAccess() {
		return this.pListItem;
	}
	
	public ParserRule getListItemRule() {
		return getListItemAccess().getRule();
	}
	
	// TextElement:
	// FreeformText | Bold | Italics;
	public TextElementElements getTextElementAccess() {
		return this.pTextElement;
	}
	
	public ParserRule getTextElementRule() {
		return getTextElementAccess().getRule();
	}
	
	// FreeformText:
	// text=HTMLSTRING;
	public FreeformTextElements getFreeformTextAccess() {
		return this.pFreeformText;
	}
	
	public ParserRule getFreeformTextRule() {
		return getFreeformTextAccess().getRule();
	}
	
	// Bold:
	// '<b>' text=HTMLSTRING '</b>';
	public BoldElements getBoldAccess() {
		return this.pBold;
	}
	
	public ParserRule getBoldRule() {
		return getBoldAccess().getRule();
	}
	
	// Italics:
	// '<i>' text=HTMLSTRING '</i>';
	public ItalicsElements getItalicsAccess() {
		return this.pItalics;
	}
	
	public ParserRule getItalicsRule() {
		return getItalicsAccess().getRule();
	}
	
	// terminal HTMLSTRING:
	// !('<' | '>' | '\t' | '\r' | '\n')*;
	public TerminalRule getHTMLSTRINGRule() {
		return this.tHTMLSTRING;
	}
	
	// terminal WS:
	// '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return this.tWS;
	}
	
	// terminal ANY_OTHER:
	// .;
	public TerminalRule getANY_OTHERRule() {
		return this.tANY_OTHER;
	}
}
