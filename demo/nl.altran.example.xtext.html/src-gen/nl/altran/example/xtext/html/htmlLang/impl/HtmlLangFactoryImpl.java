/**
 * generated by Xtext 2.9.1
 */
package nl.altran.example.xtext.html.htmlLang.impl;

import nl.altran.example.xtext.html.htmlLang.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class HtmlLangFactoryImpl extends EFactoryImpl implements HtmlLangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static HtmlLangFactory init()
  {
    try
    {
      HtmlLangFactory theHtmlLangFactory = (HtmlLangFactory)EPackage.Registry.INSTANCE.getEFactory(HtmlLangPackage.eNS_URI);
      if (theHtmlLangFactory != null)
      {
        return theHtmlLangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new HtmlLangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HtmlLangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case HtmlLangPackage.HTML: return createHtml();
      case HtmlLangPackage.HEAD: return createHead();
      case HtmlLangPackage.HEADER: return createHeader();
      case HtmlLangPackage.TITLE: return createTitle();
      case HtmlLangPackage.STYLE: return createStyle();
      case HtmlLangPackage.BODY: return createBody();
      case HtmlLangPackage.BODY_CONTENTS: return createBodyContents();
      case HtmlLangPackage.PARAGRAPH: return createParagraph();
      case HtmlLangPackage.UNORDERED_LIST: return createUnorderedList();
      case HtmlLangPackage.LIST_ITEM: return createListItem();
      case HtmlLangPackage.TEXT_ELEMENT: return createTextElement();
      case HtmlLangPackage.FREEFORM_TEXT: return createFreeformText();
      case HtmlLangPackage.BOLD: return createBold();
      case HtmlLangPackage.ITALICS: return createItalics();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Html createHtml()
  {
    HtmlImpl html = new HtmlImpl();
    return html;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Head createHead()
  {
    HeadImpl head = new HeadImpl();
    return head;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Header createHeader()
  {
    HeaderImpl header = new HeaderImpl();
    return header;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Title createTitle()
  {
    TitleImpl title = new TitleImpl();
    return title;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Style createStyle()
  {
    StyleImpl style = new StyleImpl();
    return style;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Body createBody()
  {
    BodyImpl body = new BodyImpl();
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BodyContents createBodyContents()
  {
    BodyContentsImpl bodyContents = new BodyContentsImpl();
    return bodyContents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Paragraph createParagraph()
  {
    ParagraphImpl paragraph = new ParagraphImpl();
    return paragraph;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnorderedList createUnorderedList()
  {
    UnorderedListImpl unorderedList = new UnorderedListImpl();
    return unorderedList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListItem createListItem()
  {
    ListItemImpl listItem = new ListItemImpl();
    return listItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TextElement createTextElement()
  {
    TextElementImpl textElement = new TextElementImpl();
    return textElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FreeformText createFreeformText()
  {
    FreeformTextImpl freeformText = new FreeformTextImpl();
    return freeformText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bold createBold()
  {
    BoldImpl bold = new BoldImpl();
    return bold;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Italics createItalics()
  {
    ItalicsImpl italics = new ItalicsImpl();
    return italics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HtmlLangPackage getHtmlLangPackage()
  {
    return (HtmlLangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static HtmlLangPackage getPackage()
  {
    return HtmlLangPackage.eINSTANCE;
  }

} //HtmlLangFactoryImpl
