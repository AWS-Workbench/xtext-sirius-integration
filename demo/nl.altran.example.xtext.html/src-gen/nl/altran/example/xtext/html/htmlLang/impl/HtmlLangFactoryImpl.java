/**
 * generated by Xtext 2.12.0
 */
package nl.altran.example.xtext.html.htmlLang.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.impl.EFactoryImpl;
import org.eclipse.emf.ecore.plugin.EcorePlugin;

import nl.altran.example.xtext.html.htmlLang.Body;
import nl.altran.example.xtext.html.htmlLang.BodyContents;
import nl.altran.example.xtext.html.htmlLang.Bold;
import nl.altran.example.xtext.html.htmlLang.FreeformText;
import nl.altran.example.xtext.html.htmlLang.Head;
import nl.altran.example.xtext.html.htmlLang.Header;
import nl.altran.example.xtext.html.htmlLang.Html;
import nl.altran.example.xtext.html.htmlLang.HtmlLangFactory;
import nl.altran.example.xtext.html.htmlLang.HtmlLangPackage;
import nl.altran.example.xtext.html.htmlLang.Italics;
import nl.altran.example.xtext.html.htmlLang.ListItem;
import nl.altran.example.xtext.html.htmlLang.Paragraph;
import nl.altran.example.xtext.html.htmlLang.Style;
import nl.altran.example.xtext.html.htmlLang.TextElement;
import nl.altran.example.xtext.html.htmlLang.Title;
import nl.altran.example.xtext.html.htmlLang.UnorderedList;

/**
 * <!-- begin-user-doc --> An implementation of the model <b>Factory</b>. <!--
 * end-user-doc -->
 *
 * @generated
 */
public class HtmlLangFactoryImpl extends EFactoryImpl implements HtmlLangFactory {
	/**
	 * Creates the default factory implementation. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 *
	 * @generated
	 */
	public static HtmlLangFactory init() {
		try {
			final HtmlLangFactory theHtmlLangFactory = (HtmlLangFactory) EPackage.Registry.INSTANCE
					.getEFactory(HtmlLangPackage.eNS_URI);
			if (theHtmlLangFactory != null) {
				return theHtmlLangFactory;
			}
		} catch (final Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new HtmlLangFactoryImpl();
	}

	/**
	 * Creates an instance of the factory. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 *
	 * @generated
	 */
	public HtmlLangFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public EObject create(final EClass eClass) {
		switch (eClass.getClassifierID()) {
			case HtmlLangPackage.HTML:
				return createHtml();
			case HtmlLangPackage.HEAD:
				return createHead();
			case HtmlLangPackage.HEADER:
				return createHeader();
			case HtmlLangPackage.TITLE:
				return createTitle();
			case HtmlLangPackage.STYLE:
				return createStyle();
			case HtmlLangPackage.BODY:
				return createBody();
			case HtmlLangPackage.BODY_CONTENTS:
				return createBodyContents();
			case HtmlLangPackage.PARAGRAPH:
				return createParagraph();
			case HtmlLangPackage.UNORDERED_LIST:
				return createUnorderedList();
			case HtmlLangPackage.LIST_ITEM:
				return createListItem();
			case HtmlLangPackage.TEXT_ELEMENT:
				return createTextElement();
			case HtmlLangPackage.FREEFORM_TEXT:
				return createFreeformText();
			case HtmlLangPackage.BOLD:
				return createBold();
			case HtmlLangPackage.ITALICS:
				return createItalics();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Html createHtml() {
		final HtmlImpl html = new HtmlImpl();
		return html;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Head createHead() {
		final HeadImpl head = new HeadImpl();
		return head;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Header createHeader() {
		final HeaderImpl header = new HeaderImpl();
		return header;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Title createTitle() {
		final TitleImpl title = new TitleImpl();
		return title;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Style createStyle() {
		final StyleImpl style = new StyleImpl();
		return style;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Body createBody() {
		final BodyImpl body = new BodyImpl();
		return body;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public BodyContents createBodyContents() {
		final BodyContentsImpl bodyContents = new BodyContentsImpl();
		return bodyContents;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Paragraph createParagraph() {
		final ParagraphImpl paragraph = new ParagraphImpl();
		return paragraph;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public UnorderedList createUnorderedList() {
		final UnorderedListImpl unorderedList = new UnorderedListImpl();
		return unorderedList;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public ListItem createListItem() {
		final ListItemImpl listItem = new ListItemImpl();
		return listItem;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public TextElement createTextElement() {
		final TextElementImpl textElement = new TextElementImpl();
		return textElement;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public FreeformText createFreeformText() {
		final FreeformTextImpl freeformText = new FreeformTextImpl();
		return freeformText;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Bold createBold() {
		final BoldImpl bold = new BoldImpl();
		return bold;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Italics createItalics() {
		final ItalicsImpl italics = new ItalicsImpl();
		return italics;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public HtmlLangPackage getHtmlLangPackage() {
		return (HtmlLangPackage) getEPackage();
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 *
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static HtmlLangPackage getPackage() {
		return HtmlLangPackage.eINSTANCE;
	}

} // HtmlLangFactoryImpl
