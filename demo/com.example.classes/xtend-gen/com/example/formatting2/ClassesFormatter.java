/**
 * generated by Xtext 2.18.0.M3
 */
package com.example.formatting2;

import com.example.classes.Association;
import com.example.classes.Attribute;
import com.example.classes.ClassModel;
import com.example.classes.ClassesPackage;
import com.example.classes.Constant;
import com.example.classes.Content;
import java.util.Arrays;
import java.util.function.Consumer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Pair;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class ClassesFormatter extends AbstractFormatter2 {
  @Extension
  private ClassesPackage _classesPackage = ClassesPackage.eINSTANCE;
  
  protected void _format(final ClassModel classModel, @Extension final IFormattableDocument document) {
    final Consumer<Content> _function = (Content it) -> {
      document.<Content>format(it);
    };
    classModel.getContent().forEach(_function);
  }
  
  protected void _format(final Constant constant, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.prepend(this.textRegionExtensions.regionFor(constant).keyword("constant"), _function);
  }
  
  protected void _format(final Association assoc, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.prepend(this.textRegionExtensions.regionFor(assoc).keyword("association"), _function);
  }
  
  protected void _format(final com.example.classes.Class clazz, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.prepend(this.textRegionExtensions.regionFor(clazz).keyword("class"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(clazz).keyword("{"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(clazz).keyword("}"), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(Pair.<ISemanticRegion, ISemanticRegion>of(this.textRegionExtensions.regionFor(clazz).keyword("{"), this.textRegionExtensions.regionFor(clazz).keyword("}")), _function_3);
  }
  
  protected void _format(final Attribute attr, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(attr).feature(this._classesPackage.getAttribute_Visibility()), _function);
  }
  
  public void format(final Object assoc, final IFormattableDocument document) {
    if (assoc instanceof XtextResource) {
      _format((XtextResource)assoc, document);
      return;
    } else if (assoc instanceof Association) {
      _format((Association)assoc, document);
      return;
    } else if (assoc instanceof Attribute) {
      _format((Attribute)assoc, document);
      return;
    } else if (assoc instanceof com.example.classes.Class) {
      _format((com.example.classes.Class)assoc, document);
      return;
    } else if (assoc instanceof Constant) {
      _format((Constant)assoc, document);
      return;
    } else if (assoc instanceof ClassModel) {
      _format((ClassModel)assoc, document);
      return;
    } else if (assoc instanceof EObject) {
      _format((EObject)assoc, document);
      return;
    } else if (assoc == null) {
      _format((Void)null, document);
      return;
    } else if (assoc != null) {
      _format(assoc, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(assoc, document).toString());
    }
  }
}
