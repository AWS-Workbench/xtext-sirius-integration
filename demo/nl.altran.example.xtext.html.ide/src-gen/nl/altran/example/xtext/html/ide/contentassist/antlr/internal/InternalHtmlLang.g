/*
 * generated by Xtext 2.12.0
 */
grammar InternalHtmlLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package nl.altran.example.xtext.html.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package nl.altran.example.xtext.html.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import nl.altran.example.xtext.html.services.HtmlLangGrammarAccess;

}
@parser::members {
	private HtmlLangGrammarAccess grammarAccess;

	public void setGrammarAccess(HtmlLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleHtml
entryRuleHtml
:
{ before(grammarAccess.getHtmlRule()); }
	 ruleHtml
{ after(grammarAccess.getHtmlRule()); } 
	 EOF 
;

// Rule Html
ruleHtml 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHtmlAccess().getGroup()); }
		(rule__Html__Group__0)
		{ after(grammarAccess.getHtmlAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHead
entryRuleHead
:
{ before(grammarAccess.getHeadRule()); }
	 ruleHead
{ after(grammarAccess.getHeadRule()); } 
	 EOF 
;

// Rule Head
ruleHead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeadAccess().getGroup()); }
		(rule__Head__Group__0)
		{ after(grammarAccess.getHeadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeader
entryRuleHeader
:
{ before(grammarAccess.getHeaderRule()); }
	 ruleHeader
{ after(grammarAccess.getHeaderRule()); } 
	 EOF 
;

// Rule Header
ruleHeader 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeaderAccess().getAlternatives()); }
		(rule__Header__Alternatives)
		{ after(grammarAccess.getHeaderAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTitle
entryRuleTitle
:
{ before(grammarAccess.getTitleRule()); }
	 ruleTitle
{ after(grammarAccess.getTitleRule()); } 
	 EOF 
;

// Rule Title
ruleTitle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTitleAccess().getGroup()); }
		(rule__Title__Group__0)
		{ after(grammarAccess.getTitleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStyle
entryRuleStyle
:
{ before(grammarAccess.getStyleRule()); }
	 ruleStyle
{ after(grammarAccess.getStyleRule()); } 
	 EOF 
;

// Rule Style
ruleStyle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStyleAccess().getGroup()); }
		(rule__Style__Group__0)
		{ after(grammarAccess.getStyleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBody
entryRuleBody
:
{ before(grammarAccess.getBodyRule()); }
	 ruleBody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;

// Rule Body
ruleBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBodyAccess().getGroup()); }
		(rule__Body__Group__0)
		{ after(grammarAccess.getBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBodyContents
entryRuleBodyContents
:
{ before(grammarAccess.getBodyContentsRule()); }
	 ruleBodyContents
{ after(grammarAccess.getBodyContentsRule()); } 
	 EOF 
;

// Rule BodyContents
ruleBodyContents 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBodyContentsAccess().getAlternatives()); }
		(rule__BodyContents__Alternatives)
		{ after(grammarAccess.getBodyContentsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParagraph
entryRuleParagraph
:
{ before(grammarAccess.getParagraphRule()); }
	 ruleParagraph
{ after(grammarAccess.getParagraphRule()); } 
	 EOF 
;

// Rule Paragraph
ruleParagraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParagraphAccess().getGroup()); }
		(rule__Paragraph__Group__0)
		{ after(grammarAccess.getParagraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnorderedList
entryRuleUnorderedList
:
{ before(grammarAccess.getUnorderedListRule()); }
	 ruleUnorderedList
{ after(grammarAccess.getUnorderedListRule()); } 
	 EOF 
;

// Rule UnorderedList
ruleUnorderedList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnorderedListAccess().getGroup()); }
		(rule__UnorderedList__Group__0)
		{ after(grammarAccess.getUnorderedListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListItem
entryRuleListItem
:
{ before(grammarAccess.getListItemRule()); }
	 ruleListItem
{ after(grammarAccess.getListItemRule()); } 
	 EOF 
;

// Rule ListItem
ruleListItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListItemAccess().getGroup()); }
		(rule__ListItem__Group__0)
		{ after(grammarAccess.getListItemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTextElement
entryRuleTextElement
:
{ before(grammarAccess.getTextElementRule()); }
	 ruleTextElement
{ after(grammarAccess.getTextElementRule()); } 
	 EOF 
;

// Rule TextElement
ruleTextElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTextElementAccess().getAlternatives()); }
		(rule__TextElement__Alternatives)
		{ after(grammarAccess.getTextElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFreeformText
entryRuleFreeformText
:
{ before(grammarAccess.getFreeformTextRule()); }
	 ruleFreeformText
{ after(grammarAccess.getFreeformTextRule()); } 
	 EOF 
;

// Rule FreeformText
ruleFreeformText 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFreeformTextAccess().getTextAssignment()); }
		(rule__FreeformText__TextAssignment)
		{ after(grammarAccess.getFreeformTextAccess().getTextAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBold
entryRuleBold
:
{ before(grammarAccess.getBoldRule()); }
	 ruleBold
{ after(grammarAccess.getBoldRule()); } 
	 EOF 
;

// Rule Bold
ruleBold 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoldAccess().getGroup()); }
		(rule__Bold__Group__0)
		{ after(grammarAccess.getBoldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleItalics
entryRuleItalics
:
{ before(grammarAccess.getItalicsRule()); }
	 ruleItalics
{ after(grammarAccess.getItalicsRule()); } 
	 EOF 
;

// Rule Italics
ruleItalics 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getItalicsAccess().getGroup()); }
		(rule__Italics__Group__0)
		{ after(grammarAccess.getItalicsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Header__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeaderAccess().getTitleParserRuleCall_0()); }
		ruleTitle
		{ after(grammarAccess.getHeaderAccess().getTitleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getHeaderAccess().getStyleParserRuleCall_1()); }
		ruleStyle
		{ after(grammarAccess.getHeaderAccess().getStyleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BodyContents__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyContentsAccess().getParagraphParserRuleCall_0()); }
		ruleParagraph
		{ after(grammarAccess.getBodyContentsAccess().getParagraphParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBodyContentsAccess().getUnorderedListParserRuleCall_1()); }
		ruleUnorderedList
		{ after(grammarAccess.getBodyContentsAccess().getUnorderedListParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextElementAccess().getFreeformTextParserRuleCall_0()); }
		ruleFreeformText
		{ after(grammarAccess.getTextElementAccess().getFreeformTextParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTextElementAccess().getBoldParserRuleCall_1()); }
		ruleBold
		{ after(grammarAccess.getTextElementAccess().getBoldParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTextElementAccess().getItalicsParserRuleCall_2()); }
		ruleItalics
		{ after(grammarAccess.getTextElementAccess().getItalicsParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Html__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Html__Group__0__Impl
	rule__Html__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Html__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHtmlAccess().getHtmlKeyword_0()); }
	'<html>'
	{ after(grammarAccess.getHtmlAccess().getHtmlKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Html__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Html__Group__1__Impl
	rule__Html__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Html__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHtmlAccess().getHeadAssignment_1()); }
	(rule__Html__HeadAssignment_1)
	{ after(grammarAccess.getHtmlAccess().getHeadAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Html__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Html__Group__2__Impl
	rule__Html__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Html__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHtmlAccess().getBodyAssignment_2()); }
	(rule__Html__BodyAssignment_2)
	{ after(grammarAccess.getHtmlAccess().getBodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Html__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Html__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Html__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHtmlAccess().getHtmlKeyword_3()); }
	'</html>'
	{ after(grammarAccess.getHtmlAccess().getHtmlKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Head__Group__0__Impl
	rule__Head__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadAccess().getHeadAction_0()); }
	()
	{ after(grammarAccess.getHeadAccess().getHeadAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Head__Group__1__Impl
	rule__Head__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadAccess().getHeadKeyword_1()); }
	'<head>'
	{ after(grammarAccess.getHeadAccess().getHeadKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Head__Group__2__Impl
	rule__Head__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadAccess().getHeadersAssignment_2()); }
	(rule__Head__HeadersAssignment_2)*
	{ after(grammarAccess.getHeadAccess().getHeadersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Head__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadAccess().getHeadKeyword_3()); }
	'</head>'
	{ after(grammarAccess.getHeadAccess().getHeadKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Title__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Title__Group__0__Impl
	rule__Title__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleAccess().getTitleKeyword_0()); }
	'<title>'
	{ after(grammarAccess.getTitleAccess().getTitleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Title__Group__1__Impl
	rule__Title__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleAccess().getNameAssignment_1()); }
	(rule__Title__NameAssignment_1)
	{ after(grammarAccess.getTitleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Title__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleAccess().getTitleKeyword_2()); }
	'</title>'
	{ after(grammarAccess.getTitleAccess().getTitleKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Style__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Style__Group__0__Impl
	rule__Style__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Style__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStyleAccess().getStyleKeyword_0()); }
	'<style>'
	{ after(grammarAccess.getStyleAccess().getStyleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Style__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Style__Group__1__Impl
	rule__Style__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Style__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStyleAccess().getStylesAssignment_1()); }
	(rule__Style__StylesAssignment_1)
	{ after(grammarAccess.getStyleAccess().getStylesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Style__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Style__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Style__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStyleAccess().getStyleKeyword_2()); }
	'</style>'
	{ after(grammarAccess.getStyleAccess().getStyleKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__0__Impl
	rule__Body__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getBodyAction_0()); }
	()
	{ after(grammarAccess.getBodyAccess().getBodyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__1__Impl
	rule__Body__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getBodyKeyword_1()); }
	'<body>'
	{ after(grammarAccess.getBodyAccess().getBodyKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__2__Impl
	rule__Body__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getContentsAssignment_2()); }
	(rule__Body__ContentsAssignment_2)*
	{ after(grammarAccess.getBodyAccess().getContentsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getBodyKeyword_3()); }
	'</body>'
	{ after(grammarAccess.getBodyAccess().getBodyKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Paragraph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Paragraph__Group__0__Impl
	rule__Paragraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Paragraph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParagraphAccess().getParagraphAction_0()); }
	()
	{ after(grammarAccess.getParagraphAccess().getParagraphAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Paragraph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Paragraph__Group__1__Impl
	rule__Paragraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Paragraph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParagraphAccess().getPKeyword_1()); }
	'<p>'
	{ after(grammarAccess.getParagraphAccess().getPKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Paragraph__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Paragraph__Group__2__Impl
	rule__Paragraph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Paragraph__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParagraphAccess().getContentsAssignment_2()); }
	(rule__Paragraph__ContentsAssignment_2)*
	{ after(grammarAccess.getParagraphAccess().getContentsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Paragraph__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Paragraph__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Paragraph__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParagraphAccess().getPKeyword_3()); }
	'</p>'
	{ after(grammarAccess.getParagraphAccess().getPKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnorderedList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnorderedList__Group__0__Impl
	rule__UnorderedList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnorderedList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnorderedListAccess().getUlKeyword_0()); }
	'<ul>'
	{ after(grammarAccess.getUnorderedListAccess().getUlKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnorderedList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnorderedList__Group__1__Impl
	rule__UnorderedList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnorderedList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getUnorderedListAccess().getItemsAssignment_1()); }
		(rule__UnorderedList__ItemsAssignment_1)
		{ after(grammarAccess.getUnorderedListAccess().getItemsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getUnorderedListAccess().getItemsAssignment_1()); }
		(rule__UnorderedList__ItemsAssignment_1)*
		{ after(grammarAccess.getUnorderedListAccess().getItemsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnorderedList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnorderedList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnorderedList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnorderedListAccess().getUlKeyword_2()); }
	'</ul>'
	{ after(grammarAccess.getUnorderedListAccess().getUlKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListItem__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListItem__Group__0__Impl
	rule__ListItem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListItem__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListItemAccess().getListItemAction_0()); }
	()
	{ after(grammarAccess.getListItemAccess().getListItemAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListItem__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListItem__Group__1__Impl
	rule__ListItem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListItem__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListItemAccess().getLiKeyword_1()); }
	'<li>'
	{ after(grammarAccess.getListItemAccess().getLiKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListItem__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListItem__Group__2__Impl
	rule__ListItem__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListItem__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListItemAccess().getContentsAssignment_2()); }
	(rule__ListItem__ContentsAssignment_2)*
	{ after(grammarAccess.getListItemAccess().getContentsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListItem__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListItem__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListItem__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListItemAccess().getLiKeyword_3()); }
	'</li>'
	{ after(grammarAccess.getListItemAccess().getLiKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bold__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bold__Group__0__Impl
	rule__Bold__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bold__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoldAccess().getBKeyword_0()); }
	'<b>'
	{ after(grammarAccess.getBoldAccess().getBKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bold__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bold__Group__1__Impl
	rule__Bold__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bold__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoldAccess().getTextAssignment_1()); }
	(rule__Bold__TextAssignment_1)
	{ after(grammarAccess.getBoldAccess().getTextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bold__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bold__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bold__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoldAccess().getBKeyword_2()); }
	'</b>'
	{ after(grammarAccess.getBoldAccess().getBKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Italics__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Italics__Group__0__Impl
	rule__Italics__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Italics__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItalicsAccess().getIKeyword_0()); }
	'<i>'
	{ after(grammarAccess.getItalicsAccess().getIKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Italics__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Italics__Group__1__Impl
	rule__Italics__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Italics__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItalicsAccess().getTextAssignment_1()); }
	(rule__Italics__TextAssignment_1)
	{ after(grammarAccess.getItalicsAccess().getTextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Italics__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Italics__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Italics__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItalicsAccess().getIKeyword_2()); }
	'</i>'
	{ after(grammarAccess.getItalicsAccess().getIKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Html__HeadAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHtmlAccess().getHeadHeadParserRuleCall_1_0()); }
		ruleHead
		{ after(grammarAccess.getHtmlAccess().getHeadHeadParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Html__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHtmlAccess().getBodyBodyParserRuleCall_2_0()); }
		ruleBody
		{ after(grammarAccess.getHtmlAccess().getBodyBodyParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__HeadersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadAccess().getHeadersHeaderParserRuleCall_2_0()); }
		ruleHeader
		{ after(grammarAccess.getHeadAccess().getHeadersHeaderParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitleAccess().getNameHTMLSTRINGTerminalRuleCall_1_0()); }
		RULE_HTMLSTRING
		{ after(grammarAccess.getTitleAccess().getNameHTMLSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Style__StylesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStyleAccess().getStylesHTMLSTRINGTerminalRuleCall_1_0()); }
		RULE_HTMLSTRING
		{ after(grammarAccess.getStyleAccess().getStylesHTMLSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__ContentsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getContentsBodyContentsParserRuleCall_2_0()); }
		ruleBodyContents
		{ after(grammarAccess.getBodyAccess().getContentsBodyContentsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Paragraph__ContentsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParagraphAccess().getContentsTextElementParserRuleCall_2_0()); }
		ruleTextElement
		{ after(grammarAccess.getParagraphAccess().getContentsTextElementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnorderedList__ItemsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnorderedListAccess().getItemsListItemParserRuleCall_1_0()); }
		ruleListItem
		{ after(grammarAccess.getUnorderedListAccess().getItemsListItemParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListItem__ContentsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListItemAccess().getContentsTextElementParserRuleCall_2_0()); }
		ruleTextElement
		{ after(grammarAccess.getListItemAccess().getContentsTextElementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeformText__TextAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFreeformTextAccess().getTextHTMLSTRINGTerminalRuleCall_0()); }
		RULE_HTMLSTRING
		{ after(grammarAccess.getFreeformTextAccess().getTextHTMLSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bold__TextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoldAccess().getTextHTMLSTRINGTerminalRuleCall_1_0()); }
		RULE_HTMLSTRING
		{ after(grammarAccess.getBoldAccess().getTextHTMLSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Italics__TextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItalicsAccess().getTextHTMLSTRINGTerminalRuleCall_1_0()); }
		RULE_HTMLSTRING
		{ after(grammarAccess.getItalicsAccess().getTextHTMLSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_HTMLSTRING : ~(('<'|'>'|'\t'|'\r'|'\n'))*;

RULE_WS : ('\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
