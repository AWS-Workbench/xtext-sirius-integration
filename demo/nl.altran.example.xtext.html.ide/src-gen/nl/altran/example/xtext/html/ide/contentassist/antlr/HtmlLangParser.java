/*
 * generated by Xtext 2.9.1
 */
package nl.altran.example.xtext.html.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import nl.altran.example.xtext.html.ide.contentassist.antlr.internal.InternalHtmlLangParser;
import nl.altran.example.xtext.html.services.HtmlLangGrammarAccess;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class HtmlLangParser extends AbstractContentAssistParser {

	@Inject
	private HtmlLangGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalHtmlLangParser createParser() {
		InternalHtmlLangParser result = new InternalHtmlLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getHeaderAccess().getAlternatives(), "rule__Header__Alternatives");
					put(grammarAccess.getBodyContentsAccess().getAlternatives(), "rule__BodyContents__Alternatives");
					put(grammarAccess.getTextElementAccess().getAlternatives(), "rule__TextElement__Alternatives");
					put(grammarAccess.getHtmlAccess().getGroup(), "rule__Html__Group__0");
					put(grammarAccess.getHeadAccess().getGroup(), "rule__Head__Group__0");
					put(grammarAccess.getTitleAccess().getGroup(), "rule__Title__Group__0");
					put(grammarAccess.getStyleAccess().getGroup(), "rule__Style__Group__0");
					put(grammarAccess.getBodyAccess().getGroup(), "rule__Body__Group__0");
					put(grammarAccess.getParagraphAccess().getGroup(), "rule__Paragraph__Group__0");
					put(grammarAccess.getUnorderedListAccess().getGroup(), "rule__UnorderedList__Group__0");
					put(grammarAccess.getListItemAccess().getGroup(), "rule__ListItem__Group__0");
					put(grammarAccess.getBoldAccess().getGroup(), "rule__Bold__Group__0");
					put(grammarAccess.getItalicsAccess().getGroup(), "rule__Italics__Group__0");
					put(grammarAccess.getHtmlAccess().getHeadAssignment_1(), "rule__Html__HeadAssignment_1");
					put(grammarAccess.getHtmlAccess().getBodyAssignment_2(), "rule__Html__BodyAssignment_2");
					put(grammarAccess.getHeadAccess().getHeadersAssignment_2(), "rule__Head__HeadersAssignment_2");
					put(grammarAccess.getTitleAccess().getNameAssignment_1(), "rule__Title__NameAssignment_1");
					put(grammarAccess.getStyleAccess().getStylesAssignment_1(), "rule__Style__StylesAssignment_1");
					put(grammarAccess.getBodyAccess().getContentsAssignment_2(), "rule__Body__ContentsAssignment_2");
					put(grammarAccess.getParagraphAccess().getContentsAssignment_2(), "rule__Paragraph__ContentsAssignment_2");
					put(grammarAccess.getUnorderedListAccess().getItemsAssignment_1(), "rule__UnorderedList__ItemsAssignment_1");
					put(grammarAccess.getListItemAccess().getContentsAssignment_2(), "rule__ListItem__ContentsAssignment_2");
					put(grammarAccess.getFreeformTextAccess().getTextAssignment(), "rule__FreeformText__TextAssignment");
					put(grammarAccess.getBoldAccess().getTextAssignment_1(), "rule__Bold__TextAssignment_1");
					put(grammarAccess.getItalicsAccess().getTextAssignment_1(), "rule__Italics__TextAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalHtmlLangParser typedParser = (InternalHtmlLangParser) parser;
			typedParser.entryRuleHtml();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}

	public HtmlLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HtmlLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
